//     derot is the GUI frontend that controls the field derotator
//     Copyright (C) 2015  C.Y. Tan
//     Contact: cytan299@yahoo.com

//     This file is part of derot

//     derot is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.

//     derot is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.

//     You should have received a copy of the GNU General Public License
//     along with derot.  If not, see <http://www.gnu.org/licenses/>.

// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef DeRotatorUI_h
#define DeRotatorUI_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <string>
#include <iostream>
#include "logging.hpp"
#include <FL/Fl_Group.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Light_Button.H>
#include <Fl/Fl_Int_Input.H>
#define MECHANICAL_STEPSIZE 0.05970731707 // deg/step
#include <Fl/Fl_Float_Input.H>
#define REPEAT_TIME 0.5
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Native_File_Chooser.H>
#include "DeRotatorConfig.hpp"
#include "boost/filesystem.hpp"
#include "TCPClient.hpp"
#include "SerialClient.hpp"
#include "StatusPacket.hpp"
#ifdef __APPLE__
#include <CoreFoundation/CFURL.h>
#include <CoreFoundation/CFBUNDLE.h>
#endif
#include <FL/Fl_Help_Dialog.h>
#include "version.hpp"
#include "DeRotatorGraphics.hpp"
#include <FL/Fl_Input.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Float_Input.H>

/**
 The GUI frontend that allows the user to control the field de-rotator.
*/
class DeRotatorUI {
public:
  SerialClient* _serial_client; 
  TCPClient* _tcp_client; 
  Fl_Text_Buffer *_message_buffer; 
  DeRotatorConfig* _derotator_config; 
  Fl_Help_Dialog *_introduction; 
  Fl_Help_Dialog *_interface_help; 
  Fl_Help_Dialog *_controller_help; 
  string _help_dir; 
  DeRotatorUI();
  Fl_Double_Window *mainWindow;
private:
  inline void cb_mainWindow_i(Fl_Double_Window*, void*);
  static void cb_mainWindow(Fl_Double_Window*, void*);
public:
  Fl_Button *Send;
private:
  inline void cb_Send_i(Fl_Button*, void*);
  static void cb_Send(Fl_Button*, void*);
public:
  Fl_Light_Button *SetHome;
private:
  inline void cb_SetHome_i(Fl_Light_Button*, void*);
  static void cb_SetHome(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *SetCWLimit;
private:
  inline void cb_SetCWLimit_i(Fl_Light_Button*, DeRotatorUI*);
  static void cb_SetCWLimit(Fl_Light_Button*, DeRotatorUI*);
public:
  Fl_Light_Button *SetCCWLimit;
private:
  inline void cb_SetCCWLimit_i(Fl_Light_Button*, void*);
  static void cb_SetCCWLimit(Fl_Light_Button*, void*);
public:
  Fl_Int_Input *steps;
private:
  inline void cb_steps_i(Fl_Int_Input*, void*);
  static void cb_steps(Fl_Int_Input*, void*);
public:
  Fl_Float_Input *deg;
private:
  inline void cb_deg_i(Fl_Float_Input*, void*);
  static void cb_deg(Fl_Float_Input*, void*);
public:
  Fl_Button *Start;
private:
  inline void cb_Start_i(Fl_Button*, void*);
  static void cb_Start(Fl_Button*, void*);
public:
  Fl_Button *Stop;
private:
  inline void cb_Stop_i(Fl_Button*, void*);
  static void cb_Stop(Fl_Button*, void*);
public:
  Fl_Button *Home;
private:
  inline void cb_Home_i(Fl_Button*, void*);
  static void cb_Home(Fl_Button*, void*);
public:
  Fl_Text_Display *Messages;
  Fl_Menu_Bar *MenuBar;
  static Fl_Menu_Item menu_MenuBar[];
  static Fl_Menu_Item *OpenConfiguration;
private:
  inline void cb_OpenConfiguration_i(Fl_Menu_*, void*);
  static void cb_OpenConfiguration(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SaveConfiguration;
private:
  inline void cb_SaveConfiguration_i(Fl_Menu_*, void*);
  static void cb_SaveConfiguration(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SaveConfigurationAs;
private:
  inline void cb_SaveConfigurationAs_i(Fl_Menu_*, void*);
  static void cb_SaveConfigurationAs(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *QuitAndSaveConfig;
private:
  inline void cb_QuitAndSaveConfig_i(Fl_Menu_*, void*);
  static void cb_QuitAndSaveConfig(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Quit;
private:
  inline void cb_Quit_i(Fl_Menu_*, void*);
  static void cb_Quit(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *WifiIPAddress;
private:
  inline void cb_WifiIPAddress_i(Fl_Menu_*, void*);
  static void cb_WifiIPAddress(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SerialDevPort;
private:
  inline void cb_SerialDevPort_i(Fl_Menu_*, void*);
  static void cb_SerialDevPort(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *QueryHardware;
private:
  inline void cb_QueryHardware_i(Fl_Menu_*, void*);
  static void cb_QueryHardware(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SetHallHome;
private:
  inline void cb_SetHallHome_i(Fl_Menu_*, void*);
  static void cb_SetHallHome(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *IsLimitsEnabled;
private:
  inline void cb_IsLimitsEnabled_i(Fl_Menu_*, void*);
  static void cb_IsLimitsEnabled(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *IsClockWise;
private:
  inline void cb_IsClockWise_i(Fl_Menu_*, void*);
  static void cb_IsClockWise(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SetHardwareWLAN;
private:
  inline void cb_SetHardwareWLAN_i(Fl_Menu_*, void*);
  static void cb_SetHardwareWLAN(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SaveHardwareSetup;
private:
  inline void cb_SaveHardwareSetup_i(Fl_Menu_*, void*);
  static void cb_SaveHardwareSetup(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LoadHardwareSetup;
private:
  inline void cb_LoadHardwareSetup_i(Fl_Menu_*, void*);
  static void cb_LoadHardwareSetup(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LoadDefaultHardwareSetup;
private:
  inline void cb_LoadDefaultHardwareSetup_i(Fl_Menu_*, void*);
  static void cb_LoadDefaultHardwareSetup(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *IntroducingFieldDeRotator;
private:
  inline void cb_IntroducingFieldDeRotator_i(Fl_Menu_*, void*);
  static void cb_IntroducingFieldDeRotator(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *UserInterfaceHelp;
private:
  inline void cb_UserInterfaceHelp_i(Fl_Menu_*, void*);
  static void cb_UserInterfaceHelp(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ControllerHelp;
private:
  inline void cb_ControllerHelp_i(Fl_Menu_*, void*);
  static void cb_ControllerHelp(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *About;
private:
  inline void cb_About_i(Fl_Menu_*, void*);
  static void cb_About(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SerialStatus;
private:
  inline void cb_SerialStatus_i(Fl_Menu_*, void*);
  static void cb_SerialStatus(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *WifiStatus;
private:
  inline void cb_WifiStatus_i(Fl_Menu_*, void*);
  static void cb_WifiStatus(Fl_Menu_*, void*);
public:
  Fl_Group *Graphics;
  DeRotatorGraphics *derotator_graphics;
  Fl_Double_Window *WifiIPPopup;
  Fl_Input *IPAddress;
private:
  inline void cb_OK_i(Fl_Button*, void*);
  static void cb_OK(Fl_Button*, void*);
  inline void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
public:
  Fl_Double_Window *SerialDevPopup;
  Fl_Input *SerialDevice;
private:
  inline void cb_OK1_i(Fl_Button*, void*);
  static void cb_OK1(Fl_Button*, void*);
  inline void cb_Cancel1_i(Fl_Button*, void*);
  static void cb_Cancel1(Fl_Button*, void*);
public:
  Fl_Double_Window *HardwareWLANPopup;
  Fl_Input *WLANSSID;
  Fl_Input *WLANPassword;
  Fl_Choice *WLANSecurity;
  static Fl_Menu_Item menu_WLANSecurity[];
private:
  inline void cb_Send1_i(Fl_Button*, void*);
  static void cb_Send1(Fl_Button*, void*);
  inline void cb_Cancel2_i(Fl_Button*, void*);
  static void cb_Cancel2(Fl_Button*, void*);
public:
  Fl_Double_Window *Version;
  Fl_Box *VersionLabel;
  Fl_Double_Window *ConnectWithPopup;
  Fl_Group *ConnectGroup;
  Fl_Round_Button *SerialPortSelected;
  Fl_Round_Button *WifiSelected;
  Fl_Round_Button *NoneSelected;
private:
  inline void cb_OK2_i(Fl_Button*, void*);
  static void cb_OK2(Fl_Button*, void*);
public:
  Fl_Double_Window *SetHallHomePopup;
  Fl_Float_Input *HallAngleInput;
private:
  inline void cb_HallAngleInput_i(Fl_Float_Input*, void*);
  static void cb_HallAngleInput(Fl_Float_Input*, void*);
  inline void cb_OK3_i(Fl_Button*, void*);
  static void cb_OK3(Fl_Button*, void*);
  inline void cb_Cancel3_i(Fl_Button*, void*);
  static void cb_Cancel3(Fl_Button*, void*);
public:
  void show(int argc, char** argv);
  void show();
  static void timer_cb(void* data);
  static void timer_cb1(void* data);
  static void timer_cb2(void* data);
  int SendCommand(RequestPacket* const rq);
  int SendCommand(RequestPacket* const rq, ReplyPacket* const rp);
};
#endif
